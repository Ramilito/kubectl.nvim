name: Release-build

on:
  pull_request: ~
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          ## Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: target/x86_64-unknown-linux-gnu/release/libkubectl_client.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: target/aarch64-unknown-linux-gnu/release/libkubectl_client.so
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: target/x86_64-unknown-linux-musl/release/libkubectl_client.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: target/aarch64-unknown-linux-musl/release/libkubectl_client.so
          - os: ubuntu-latest
            target: aarch64-linux-android
            artifact_name: target/aarch64-linux-android/release/libkubectl_client.so

          ## macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: target/x86_64-apple-darwin/release/libkubectl_client.dylib
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: target/aarch64-apple-darwin/release/libkubectl_client.dylib

          ## Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: target/x86_64-pc-windows-msvc/release/libkubectl_client.dll

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Go Library
        run: |
          echo "Building Go static library..."
          cd go
          # Build the Go static library in c-archive mode.
          go build -trimpath -ldflags "-s -w" -o libkubedescribe.a -buildmode=c-archive .
          cd ..
          # Place the prebuilt library into a directory that build.rs will use.
          mkdir -p prebuilt_go_lib
          cp go/libkubedescribe.a prebuilt_go_lib/
        shell: bash

      - name: Install Rust
        run: |
          rustup toolchain install nightly
          rustup default nightly
          rustup target add ${{ matrix.target }}

      - name: Build for Linux
        if: contains(matrix.os, 'ubuntu')
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          # Set PREBUILT_GO_LIB so that build.rs links against the prebuilt Go library.
          PREBUILT_GO_LIB="$(pwd)/prebuilt_go_lib" cross build --release --target ${{ matrix.target }}
          mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.so"
        shell: bash

      - name: Build for macOS
        if: contains(matrix.os, 'macos')
        run: |
          MACOSX_DEPLOYMENT_TARGET="13" cargo build --release --target ${{ matrix.target }}
          mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.dylib"
        shell: bash

      - name: Build for Windows
        if: contains(matrix.os, 'windows')
        run: |
          cargo build --release --target ${{ matrix.target }}
          mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.dll"
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.*

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          token: ${{ github.token }}
          files: ./**/*
          draft: false
          prerelease: false
          generate_release_notes: true
